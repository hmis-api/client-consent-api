#%RAML 0.8
title: Client Consent API
version: 0.1.0
baseUri: https://www.hmislynk.com/

securitySchemes:
    - oauth_2_0:
        description: |
            Supports OAuth 2.0 for authenticating all API requests.
        type: OAuth 2.0
        describedBy:
            headers:
                Authorization:
                    description: |
                       Used to send a valid OAuth 2 access token. Do not use
                       with the "access_token" query string parameter.
                    type: string
                    example: |
                      Authorization: Bearer czZCaGRSa3F0MzpnWDFmQmF0M2JW
            queryParameters:
                access_token:
                    description: |
                       Used to send a valid OAuth 2 access token. Do not use together with
                       the "Authorization" header
                    type: string
            responses:
                401:
                    description: |
                        Bad or expired token. This can happen if the user or Dropbox
                        revoked or expired an access token. To fix, you should re-
                        authenticate the user.
                403:
                    description: |
                        Bad OAuth request (wrong consumer key, bad nonce, expired
                        timestamp...). Unfortunately, re-authenticating the user won't help here.
        settings:
          authorizationUri: https://www.hserv.com/1/oauth2/authorize
          accessTokenUri: https://api.hserv.com/1/oauth2/token
          authorizationGrants: [ code, token ]
mediaType: application/json
schemas: 
   - client_not_found : !include schemas/client_not_found.json
   - consent_id_schema : !include schemas/consent_id_schema.json
   - consent_not_found : !include schemas/consent_not_found.json
   - consent_request_id_schema : !include schemas/consent_request_id_schema.json
   - consent_request_not_found : !include schemas/consent_request_not_found.json
   - consent_request_schema : !include schemas/consent_request_schema.json
   - consent_schema : !include schemas/consent_schema.json
   - consents_request_schema : !include schemas/consents_request_schema.json
   - consents_schema : !include schemas/consents_schema.json
   - id_consent_request_schema : !include schemas/id_consent_request_schema.json
   - id_consent_schema : !include schemas/id_consent_schema.json
   - client_consent_request_status_schema: !include schemas/client_consent_request_status_schema.json

/clients/{clientid}/consents:
  post:
    description: Create client consent.
            NOTE- A client consent will also be created when a consent request is approved. 
    body:
      application/json:
        example: !include examples/consent_example.json
        schema:  consent_schema
    responses: 
      200:
        body: 
          application/json:
            example: !include examples/consent_id_example.json
            schema: consent_id_schema
      404:
        body: 
          application/json:
            example: !include examples/client_not_found.json
            schema: client_not_found
  
  get:
    description: Get consents of a client
    responses: 
      200:
        body: 
          application/json:
            example: !include examples/consents_example.json
            schema: consents_schema

/clients/{clientid}/consents/{consentid}:
  put:
    description: Update a client consent. The purpose of the API is to
          1. Update the status of a consent (Allowed values APPROVED / REJECTED)
          2. Update the status effective dates.
          3. Update the consent entity types.
    body:
      application/json:
        example: !include examples/consent_example.json
        schema:  consent_schema
    responses: 
      201:
      404:
        body: 
          application/json:
            example: !include examples/consent_not_found.json
            schema:  consent_not_found

  delete:
    description: Delete a client consent
    responses: 
      201:
      404:
        body: 
          application/json:
            example: !include examples/consent_not_found.json
            schema: consent_not_found
  get:
    description: Get a client consent details
    responses: 
      200:
        body: 
          application/json:
            example: !include examples/id_consent_example.json
            schema: id_consent_schema
      404:
        body: 
          application/json:
            example: !include examples/consent_not_found.json
            schema: consent_not_found
/clients/{clientid}/consents/{consentid}/documents:
  post:
    description: |
        Uploads the consent document (Verbal / signed document) for the client for a specific consent.  The content type should be multipart/form-data ( Content-Type: multipart/form-data). 
    body: 
      multipart/form-data:
        example: |
                    Content-Type: multipart/form-data; boundary=WebKitFormBoundarytujNY4RwDez6d3Hk
                    
                    --WebKitFormBoundarytujNY4RwDez6d3Hk
                    Content-Disposition: form-data; name="json"
                    Content-Type: application/json
                    
                    { "type": "docuemnts","remarks":"Project 1 consent document" }
                    
                    --WebKitFormBoundarytujNY4RwDez6d3Hk--
                    Content-Disposition: form-data; name="image"; filename="image.jpg"
                    Content-Type: application/octet-stream
                    
                    ... content of image.jpg ...
                    
                    --WebKitFormBoundarytujNY4RwDez6d3Hk--
    responses: 
      201:
        body: 
          application/json:
      404:
        body: 
          application/json:
            example: !include examples/consent_not_found.json
            schema: consent_not_found      
  get:
    description: | 
            Downloads all the consent documents associated with a specific consent.            
    responses: 
      200: 
        body: 
          application/json:
      404:
        body: 
          application/json:
            example: !include examples/consent_not_found.json
            schema: consent_not_found      
        
/clients/{clientid}/consentrequests:
  post:
    description: Create client consent request. A consent request can be made for a specific (or multiple) consent entity types and for a specific duration. Initially the status of the consent request will be set to "REQUESTED".
    body:
      application/json:
        example: !include examples/consent_request_example.json
        schema:  consent_request_schema
    responses: 
      200:
        body: 
          application/json:
            example: !include examples/consent_request_id_example.json
            schema: consent_request_id_schema
      404:
        body: 
          application/json:
            example: !include examples/client_not_found.json
            schema: client_not_found
  
  get:
    description: Get consent requests of a client
    responses: 
      200:
        body: 
          application/json:
            example: !include examples/consent_requests_example.json
            schema: consents_request_schema


/clients/{clientid}/consentrequests/{consentrequestid}:
  put:
    description: Update a client consent request. Consent request can be updated only when the status is still in "REQUESTED" state.
    body:
      application/json:
        example: !include examples/consent_request_example.json
        schema:  consent_request_schema
    responses: 
      201:
      404:
        body: 
          application/json:
            example: !include examples/consent_request_not_found.json
            schema:  consent_request_not_found
      403:
        body: 
          application/json:
            example: |
                      {
                        "errors": [
                          {
                            "code": "CANNOT_UPDATE_CONSENT_REQUEST",
                            "message": "consent request already approved / rejected."
                          }
                        ]
                      }

  delete:
    description:  Delete a client consent request. Consent request can be deleted only when the status is still in "REQUESTED" state.
    responses: 
      201:
      404:
        body: 
          application/json:
            example: !include examples/consent_request_not_found.json
            schema: consent_request_not_found
      403:
        body: 
          application/json:
            example: |
                      {
                        "errors": [
                          {
                            "code": "CANNOT_DELETE_CONSENT_REQUEST",
                            "message": "consent request already approved / rejected."
                          }
                        ]
                      }

  get:
    description: Get details for a specific client consent request.
    responses: 
      200:
        body: 
          application/json:
            example: !include examples/id_consent_request_example.json
            schema: id_consent_request_schema
      404:
        body: 
          application/json:
            example: !include examples/consent_request_not_found.json
            schema: consent_request_not_found
/clients/{clientid}/consentrequests/{consentrequestid}/statuses:
  put: 
    description: Approve or Reject client consent request. Once consent request is approved a new consent will be created for the requester project group and for the consent entity. The consent request, cannot be modified any further as it is already approved. Any changes to the duration of the consent etc. can be done on the consent directly. Allowed values for the consent request status are APPROVED / REJECTED.
    body: 
      application/json:
        example: !include examples/client_consent_request_status_example.json
        schema: client_consent_request_status_schema
    responses: 
      404:
        body: 
          application/json:
            example: !include examples/consent_not_found.json
            schema: consent_not_found
      
/consententitytypes:
  get: 
    description: Get consent entity types.
    responses: 
      200:
        body: 
          application/json:
            example: |
                  {
                     "consententitytypes":{
                        "pagination":{
                           "from":0,
                           "returned":2,
                           "total":30,
                           "maximum":30,
                           "sort":{
                  
                           }
                        },
                        "consententitytypes":[
                           {
                              "consententitytype":{
                                 "entityTypeId":"2a484199-e2cb-4044-bee9-f0bbcea7eff3",
                                 "entityType":"Project"
                              }
                           },
                           {
                              "consententitytype":{
                                 "entityTypeId":"2a484200-e2cb-4044-bee9-f0bbcea7eff3",
                                 "entityType":"coc"
                              }
                           }
                        ]
                     }
                  }
          